/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}



// ---------------------------- //
// Begin app-specific functions //
// ---------------------------- //



var wid = widget.identifier;
//var prefType = loadPref(wid+"type",0);



// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	document.getElementById("type").object.setSelectedIndex(prefType);
}

function updatePrefs() {
	if (window.widget) {
//		widget.setPreferenceForKey(prefType,wid+"type");
	}
}

function erasePrefs() {
	if (window.widget) {
//		widget.setPreferenceForKey(null,wid+"type");
	}
}



// Basic Functions

function updateType(event) {
	prefType = document.getElementById("type").object.getSelectedIndex();
	updatePrefs();
	updateFeedback();
}



// Output Functions

function updateOutput(event) {
//	document.getElementById("content").innerHTML = convert_textile(document.getElementById("input").value);
	document.getElementById("content").innerHTML = wiky.process(document.getElementById("input").value);
}



function updateScroll() {
//	alert("scrollHeight: "+document.getElementById("input").scrollHeight);
//	alert("offsetHeight: "+document.getElementById("input").offsetHeight);	// this is the correct value to use when dealing with automatic scrolling (when you move the text cursor to the bottom of a file)
//	alert("offsetHeight: "+document.getElementById("input").clientHeight);	// this is the correct value to use when dealing with user scrolling (when the user physically scrolls the content using the scrub bar or mouse wheel)
//	alert("scrollTop:    "+document.getElementById("input").scrollTop);		// NO IDEA why that is...

	var source = document.getElementById("input");
	var target = document.getElementById("content");
//	alert(target.scrollHeight);
//	alert(target.clientHeight);

	var scroll = (source.scrollTop>0)?source.scrollTop/(source.scrollHeight-source.clientHeight):0;
//	alert("scroll position - "+scroll);
	scroll = (scroll>0)?parseInt(scroll*(target.scrollHeight-target.clientHeight)):0;
//	alert("scroll pixels - "+scroll);

	var scrollArea = document.getElementById("scrollArea").object;
	scrollArea.verticalScrollTo(scroll);
}



// CurrentView animations

function hideSettings(event) {
	document.getElementById("settings").object.setCurrentView("hidden", false, true);
}

function showSettings(event) {
	document.getElementById("settings").object.setCurrentView("shown", true, true);
}



// Element animations

function settingsOver(event) {
	var item = event.target;
	item = document.getElementById("box");
	var fadeHandler = function(a, c, s, f){ item.style.opacity = c; };
	new AppleAnimator(200, 5, 0.0, 1.0, fadeHandler).start();
}

function settingsOut(event) {
	var item = event.target;
	item = document.getElementById("box");
	var fadeHandler = function(a, c, s, f){ item.style.opacity = c; };
	new AppleAnimator(400, 10, 1.0, 0.0, fadeHandler).start();
}



// Key Listeners

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}



// Auto Update

function versionCheck(event) {
//	return null;
	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/alchemist/version.php?RandomKey=" + Date.parse(new Date());
	request.onload = function() { versionCheckEnd(request); };
	request.open("GET", address);
//	request.setRequestHeader("Cache-Control", "no-cache");
	request.send(null);
}

function versionCheckEnd(request){
	if (request.status == 200) {
		var versions = request.responseText.split("\n");
		var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion");
		var websiteVersion = versions[0];
//		alert("bundleVersion: "+bundleVersion);
//		alert("websiteVersion: "+websiteVersion);

		if (websiteVersion > bundleVersion) {
			document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
			return showUpdate();
		} else {
//			alert("you have an up to date version");
		}
	} else {
//		alert("there's been an error fetching HTTP data");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/alchemist/Alchemist.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/alchemist");
}